Welcome to the version 1.1 of the 
+---------------------------------------------------------------+
|   |                         |              /'`                |
|   | N T E R A C T I V E     |__ O G I C    \_, R E A T O R    |
+---------------------------------------------------------------+

Author: Andreas Leitgeb, avl@logic.at

Platforms: currently only Unix.
       Support for VMS, C64, M$Windoze and Mac might arise some sunny day ...

Purpose:
       iLC is a graphical Frontend to the program Multlog, by 
       "M. Ultlog". 

Requirements: you need John Ousterhout's Tcl/Tk (version 7.4/4.0 or later).
       To be exact, you only need the executable "wish" (the windowing shell)
       but not the libraries and none of the extensions.
       Furthermore you should have the Multlog-package and Prolog, or
       you will not be able to reload saved specifications ...

Primary Site:   http://www.logic.at/multlog/
       there you will also find related software: Multlog, prolog, a pointer
       to Tcl/Tk as well as two other interfaces.

Changes since version 1.0:
     - this file
     - Version-number appears in the About-box
     - iLC now preserves the order in which items are read from 
          an old specification and also allows you to determine 
          the order in which they will appear in the final result.
     - improved help on: "why is my operator/quantifier/... not correct ?"
           (focus- and cursorplacement on the erroneous part)
     - choosing "table" as type of operator now automatically
           sets arity to 2 (unless something else is already specified)
     - a few more user-configurable options in config.tcl
     - currently unavailable GUI-elements are now properly grayed out
     - fixed _ALL_ the bugs ;-)

Things to come in version 1.2 or later:
     - more comfortable Keyboard-based navigation.
     - more comfortable file selection boxes 
     - all those features that YOU request/suggest

Documentation:
       nonexistent.
       My Aim was to write an Interface, that is self-explanatory enough,
       so you won't need any help. Since you're looking for this program, 
       I can assume that you know something about Multi-valued logics ...

